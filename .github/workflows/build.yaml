# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  BUILD_TYPE: RelWithDebInfo

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install latest GCC
      run: |
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt install -y g++-13 gcc-13
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 60 --slave /usr/bin/g++ g++ /usr/bin/g++-13

    - name: Install dependencies
      run: "sudo apt install -y curl libcurl4-openssl-dev sqlite3 libsqlite3-dev"

    - name: Configure CMake
      working-directory: "${{github.workspace}}/backup/runner"
      run: "cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}"

    - name: Build
      working-directory: "${{github.workspace}}/backup/runner"
      run: "cmake --build build --config ${{env.BUILD_TYPE}}"

    - name: Create release package
      working-directory: "${{github.workspace}}/backup/runner"
      run: "zstd build/backup-runner"

    - name: Create Draft Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: binaries-${{ github.sha }}
        release_name: binaries ${{ github.sha }}
        draft: true
        prerelease: false

    - uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: "${{github.workspace}}/backup/runner/build/backup-runner.zst"
        asset_name: backup-runner.zst
        asset_content_type: application/zstd

    - uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ steps.create_release.outputs.id }}
